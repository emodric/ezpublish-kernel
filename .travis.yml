language: php

env:
  global:
    - DB_NAME="testdb"

matrix:
  # mark as finished before allow_failures are run
  fast_finish: true
  include:
# Execute unit tests, integration test stubs and integration tests using legacy storage engine
# If SYMFONY_VERSION is not specified, will take the one as deifned in composer
# 5.4
    - php: 5.4
      env: TEST_CONFIG="phpunit.xml"
    - php: 5.4
      env: TEST_CONFIG="phpunit-integration-legacy.xml" DB="mysql" DATABASE="mysql://root@localhost/$DB_NAME"
# 5.5
    - php: 5.5
      env: TEST_CONFIG="phpunit-integration-legacy.xml" DB="postgresql" DATABASE="pgsql://postgres@localhost/$DB_NAME"
# 5.6
    - php: 5.6
      env: TEST_CONFIG="phpunit-integration-legacy.xml"
    - php: 5.6
      env: SOLR_VERSION="4.10.1" TEST_CONFIG="phpunit-integration-legacy-solr.xml"

# test only master (+ Pull requests)
branches:
  only:
    - "5.4"

# setup requirements for running unit tests
before_script:
  # Disable xdebug to speed things up as we don't currently generate coverge on travis
  - if [ $TRAVIS_PHP_VERSION != "hhvm" ]; then phpenv config-rm xdebug.ini ; fi
  # Setup DB
  - if [ $DB == "mysql" ]; then mysql -e "CREATE DATABASE IF NOT EXISTS $DB_NAME;" -uroot ; fi
  - if [ $DB == "postgresql" ]; then psql -c "CREATE DATABASE $DB_NAME;" -U postgres ; psql -c "CREATE EXTENSION pgcrypto;" -U postgres $DB_NAME ; fi
  # Update composer to newest version
  - composer self-update
  # Setup github key to avoid api rate limit
  - ./composer_install_github_key.sh
  # Switch to another Symfony version if asked for
  - if [ $SYMFONY_VERSION != "" ]; then composer require --no-update symfony/symfony=$SYMFONY_VERSION; fi;
  # Install packages using composer
  - composer install --dev --prefer-dist
  # Setup Solr search if asked for
  - "if [ \"$TEST_CONFIG\" = \"phpunit-integration-legacy-solr.xml\" ] ; then curl -L https://raw.githubusercontent.com/andrerom/travis-solr/410/travis-solr.sh | SOLR_CONFS=eZ/Publish/Core/Search/Solr/Content/schema.xml bash ; fi"
  # Detecting timezone issues by testing on random timezone
  - TEST_TIMEZONES=("America/New_York" "Asia/Calcutta" "UTC")
  - TEST_TIMEZONE=${TEST_TIMEZONES["`shuf -i 0-2 -n 1`"]}
  - echo "$TEST_TIMEZONE"

# execute phpunit as the script command
script: "php -d date.timezone=$TEST_TIMEZONE -d memory_limit=-1 vendor/bin/phpunit -c $TEST_CONFIG"

# disable mail notifications
notification:
  email: false

# reduce depth (history) of git checkout
git:
  depth: 30
